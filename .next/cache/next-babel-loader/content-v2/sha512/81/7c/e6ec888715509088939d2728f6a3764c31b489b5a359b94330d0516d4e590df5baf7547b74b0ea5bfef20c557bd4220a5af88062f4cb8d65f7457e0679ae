{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport Head from \"next/head\";\nimport { Grid } from \"@material-ui/core\";\nimport { motion } from \"framer-motion\";\nimport { variants } from \"../motion/variants\";\nimport Form from \"../components/Form\";\n\nconst Index = props => {\n  const [isVisible, setIsVisible] = React.useState(true);\n\n  const handleSetIsVisible = () => {\n    setIsVisible(!isVisible);\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"link\", {\n        rel: \"stylesheet\",\n        href: \"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n      }), /*#__PURE__*/_jsx(\"link\", {\n        rel: \"stylesheet\",\n        href: \"https://fonts.googleapis.com/icon?family=Material+Icons\"\n      }), /*#__PURE__*/_jsx(\"title\", {\n        children: \"Next-JS Applicaiton\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"viewport\",\n        content: \"initial-scale=1.0, width=device-width\"\n      })]\n    }), /*#__PURE__*/_jsx(Form, {}), /*#__PURE__*/_jsx(\"button\", {\n      onClick: handleSetIsVisible,\n      children: \"Hide Data\"\n    }), /*#__PURE__*/_jsx(motion.div, {\n      animate: isVisible ? \"active\" : \"inactive\",\n      variants: variants,\n      children: /*#__PURE__*/_jsx(Grid, {\n        container: true,\n        children: props.data.map(data => {\n          return /*#__PURE__*/_jsx(Grid, {\n            style: {\n              border: \"1px solid black\"\n            },\n            item: true,\n            xs: 12,\n            sm: 6,\n            md: 4,\n            lg: 3,\n            xl: 2,\n            children: /*#__PURE__*/_jsx(\"ul\", {\n              children: /*#__PURE__*/_jsx(\"li\", {\n                children: data.title\n              })\n            })\n          }, data.id);\n        })\n      })\n    })]\n  });\n};\n\nexport default Index;\nexport const getStaticProps = () => {\n  return fetch(\"https://jsonplaceholder.typicode.com/todos\").then(res => res.json()).then(res => {\n    if (!res) {\n      return {\n        redirect: {\n          destination: \"/\",\n          permanent: false\n        }\n      };\n    }\n\n    return {\n      props: {\n        data: res\n      }\n    };\n  });\n};","map":null,"metadata":{},"sourceType":"module"}